# MCU name
MCU = atmega644p


# Processor frequency
F_CPU = 20000000


# Target file name
TARGET = yabr


# C source files
SRC = ram.c serial.c environment.c init.c main.c


# Optimization level
OPT = s


# Debug info
DEBUG = dwarf-2


#---------------- Compiler Options ----------------
CFLAGS  = -mmcu=$(MCU)
CFLAGS += -O$(OPT)
CFLAGS += -g$(DEBUG)
CFLAGS += -funsigned-char
CFLAGS += -funsigned-bitfields
CFLAGS += -fpack-struct
CFLAGS += -fshort-enums
CFLAGS += -ffreestanding
CFLAGS += -ffunction-sections
CFLAGS += -fdata-sections
CFLAGS += -fno-inline-small-functions
CFLAGS += -fno-tree-scev-cprop
CFLAGS += -fno-split-wide-types
CFLAGS += -combine
CFLAGS += -fwhole-program
CFLAGS += -Wall
CFLAGS += -Wstrict-prototypes
CFLAGS += -Wundef
CFLAGS += -Wsign-compare
CFLAGS += -std=gnu99
CFLAGS += -DF_CPU=$(F_CPU)UL
CFLAGS += -I.


#---------------- Linker Options ----------------
LDFLAGS  = -Wl,--relax
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -lm


#---------------- Programming Options (avrdude) ----------------
# Programming hardware
AVRDUDE_PROGRAMMER = avr109

# Programming port
AVRDUDE_PORT = COM3

# Programming command
AVRDUDE_WRITE_FLASH = -U flash:w:$(TARGET).hex
AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep

AVRDUDE_FLAGS = -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER)


#============================================================================
# Define programs and commands.
CC = avr-gcc
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size
AVRDUDE = avrdude
REMOVE = rm -f


# Define Messages
# English
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = -------- begin --------
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before: 
MSG_SIZE_AFTER = Size after:
MSG_FLASH = Creating load file for Flash:
MSG_EEPROM = Creating load file for EEPROM:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_COMPILING_LINKING = Compiling and Linking:
MSG_CLEANING = Cleaning project:


# Default target.
all: begin gccversion sizebefore build sizeafter end

build: elf hex eep lss

elf: $(TARGET).elf
hex: $(TARGET).hex
eep: $(TARGET).eep
lss: $(TARGET).lss 


# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@echo
	@echo $(MSG_BEGIN)

end:
	@echo $(MSG_END)
	@echo


# Display size of file.
ELFSIZE = $(SIZE) --format=avr --mcu=$(MCU) $(TARGET).elf

sizebefore:
	@if test -f $(TARGET).elf; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); \
	2>/dev/null; echo; fi

sizeafter:
	@if test -f $(TARGET).elf; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); \
	2>/dev/null; echo; fi


# Display compiler version information.
gccversion : 
	@$(CC) --version


# Program the device  
program: $(TARGET).hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)


# Program the eeprom
program_eeprom: $(TARGET).eep
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_EEPROM)


# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O ihex -R .eeprom $< $@

%.eep: %.elf
	@echo
	@echo $(MSG_EEPROM) $@
	-$(OBJCOPY) -j .eeprom --set-section-flags .eeprom=alloc,load \
	--change-section-lma .eeprom=0 -O ihex $< $@


# Create extended listing file from ELF output file.
%.lss: %.elf
	@echo
	@echo $(MSG_EXTENDED_LISTING) $@
	$(OBJDUMP) -h -S $< > $@


# Link: create ELF output file from object files.
%.elf: $(SRC)
	@echo
	@echo $(MSG_COMPILING_LINKING) $@
	$(CC) $(CFLAGS) $(LDFLAGS) $^ --output $@


# Target: clean project.
clean: begin clean_list end

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(TARGET).elf
	$(REMOVE) $(TARGET).hex
	$(REMOVE) $(TARGET).eep
	$(REMOVE) $(TARGET).lss

# Listing of phony targets.
.PHONY : $(SRC) \
all begin end sizebefore sizeafter gccversion \
build elf hex eep lss \
clean clean_list program program_eeprom
